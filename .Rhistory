plot.title = element_text(hjust = 0.5, size = 30),
plot.background = element_rect(fill = "transparent")
# panel.background = element_rect(fill = "black")
) +
geom_map(
data=map,
map=map,
aes(
x=long,
y=lat,
map_id=region,
fill=access
)
) +
scale_fill_gradient(
low = "orange",
high = "blue",
guide = "colourbar",
limits=c(0,100)
) +
coord_equal()
}
gg
}
}, bg="transparent")
output$gif100 <- renderImage({
# Create a Progress object
progress <- shiny::Progress$new(style = "old")
progress$set(message = "Computing data", value = 0)
# Close the progress when this reactive exits (even if there's an error)
on.exit(progress$close())
# Create a closure to update progress.
updateProgress <- function(value = NULL, detail = NULL) {
if (is.null(value)) {
value <- progress$getValue()
value <- value + (progress$getMax() - value) / 5
}
progress$set(value = value, detail = detail)
}
tmpfile <- image_read("gif100.gif") %>%
# image_resize("90%") %>%
image_animate(fps=4) %>%
image_write(tempfile(fileext='gif'), format = 'gif')
list(src = tmpfile, contentType = "image/gif")
})
output$gif50 <- renderImage({
# Create a Progress object
progress <- shiny::Progress$new(style = "old")
progress$set(message = "Computing data", value = 0)
# Close the progress when this reactive exits (even if there's an error)
on.exit(progress$close())
# Create a closure to update progress.
updateProgress <- function(value = NULL, detail = NULL) {
if (is.null(value)) {
value <- progress$getValue()
value <- value + (progress$getMax() - value) / 5
}
progress$set(value = value, detail = detail)
}
tmpfile <- image_read("gif50.gif") %>%
# image_resize("90%") %>%
image_animate(fps=4) %>%
image_write(tempfile(fileext='gif'), format = 'gif')
list(src = tmpfile, contentType = "image/gif")
})
output$downloadGif100 <- downloadHandler(
filename = "gif100.gif",
content = function(file){
image_write(im = image_read("gif100.gif"), path = file)
}
)
output$downloadGif50 <- downloadHandler(
filename = "gif50.gif",
content = function(file){
image_write(im = image_read("gif50.gif"), path = file)
}
)
})
shinyApp(
ui = ui,
server = server
)
server <- function(input, output) ({
options(shiny.usecairo=T)
output$MapTitle <- renderText(paste0("Map of Electricity Access in ",input$inputyear))
output$YearMap <- renderLeaflet({
# Get input year
h <- input$inputyear
# Get mapping data
countries <- YearMapDataFxn(h)
countries <- countries[!countries$ADMIN == "Antarctica",]
# Define color palette
pal <- colorNumeric(c("darkseagreen3","deepskyblue4"), domain = countries$Access)
labels <- sprintf(
"<strong>%s</strong><br/>%g &#37;</sup>",
countries$ADMIN, countries$Access
) %>% lapply(htmltools::HTML)
leaflet(countries) %>%
# options = leafletOptions(minZoom = 0, maxZoom = 3) %>%
addTiles() %>%
addPolygons(
options = leafletOptions(minZoom = 0, maxZoom = 3),
fillColor = ~pal(Access),
weight = 0.3,
opacity = 1,
color = "black",
dashArray = "",
fillOpacity = 1,
highlight = highlightOptions(
weight = 1,
color = "white",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))  %>%
addLegend(
pal = pal,
values = ~Access,
opacity = 1,
title = NULL,
labFormat = labelFormat(suffix = "%"),
position = "bottomright"
)
})
output$CountryMapTitle <- renderText({
h <- input$inputyear_c
c <- input$inputcountry
r <- input$inputregion
if(input$inputcountry == "USA - Continental"){
c="Continental USA"
}
if(input$inputcountry == "USA - Hawaii"){
c="Hawaii"
}
if(input$inputcountry == "USA - Alaska"){
c="Alaska"
}
if(r == "National"){r <- ""}
paste0("Electricity Access in ",r," ",c," in ",h)
})
output$CountryMap <- renderPlot({
# Get input year and country
h <- input$inputyear_c
c <- input$inputcountry
r <- input$inputregion
if(c == ''){
ggplot()
}
else{
# Get mapping data
if(c %in% c("USA - Hawaii","USA - Alaska","USA - Continental")){
c="USA"
}
map2 <- CountryMapDataFxn(c,h)
map <- map2[,1:6]
if(input$inputcountry == "USA - Continental"){
map <- map[!(map$subregion %in% c("Hawaii","Alaska")),]
c="Continental USA"
}
if(input$inputcountry == "USA - Hawaii"){
map <- map[map$subregion == "Hawaii",]
c="Hawaii"
}
if(input$inputcountry == "USA - Alaska"){
map <- map[map$subregion == "Alaska",]
c="Alaska"
}
# Plot
# Ammend for countries that do not have data
test <- map2[names(map2) == r]
if(dim(data.frame(test))[1]==0){
map <- worldmap[worldmap$region==c,]
gg = ggplot() +
ggtitle(
paste0(
"Data is unavailable for \n",
as.character(c)
)
) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region),
fill = "gray"
) +
theme(
plot.title = element_text(hjust = 0.5, size = 30),
plot.background = element_rect(fill = "transparent")
# panel.background = element_rect(fill = "black")
)
}else if(T %in% is.na(test)){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", c)) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region),
fill = "gray"
) +
coord_equal()
theme(
plot.title = element_text(hjust = 0.5, size = 30),
plot.background = element_rect(fill = "transparent")
# panel.background = element_rect(fill = "black")
)
}else{
map$access <- max(map2[names(map2) == r])
names(map)[ncol(map)] <- "access"
gg = ggplot() +
ggtitle(paste0(max(map$access),"%")) +
theme(
plot.title = element_text(hjust = 0.5, size = 30),
plot.background = element_rect(fill = "transparent")
# panel.background = element_rect(fill = "black")
) +
geom_map(
data=map,
map=map,
aes(
x=long,
y=lat,
map_id=region,
fill=access
)
) +
scale_fill_gradient(
low = "orange",
high = "blue",
guide = "colourbar",
limits=c(0,100)
) +
coord_equal()
}
gg
}
}, bg="transparent")
output$gif100 <- renderImage({
# Create a Progress object
progress <- shiny::Progress$new(style = "old")
progress$set(message = "Computing data", value = 0)
# Close the progress when this reactive exits (even if there's an error)
on.exit(progress$close())
# Create a closure to update progress.
updateProgress <- function(value = NULL, detail = NULL) {
if (is.null(value)) {
value <- progress$getValue()
value <- value + (progress$getMax() - value) / 5
}
progress$set(value = value, detail = detail)
}
tmpfile <- image_read("gif100.gif") %>%
# image_resize("90%") %>%
image_animate(fps=4) %>%
image_write(tempfile(fileext='gif'), format = 'gif')
list(src = tmpfile, contentType = "image/gif")
})
output$gif50 <- renderImage({
# Create a Progress object
progress <- shiny::Progress$new(style = "old")
progress$set(message = "Computing data", value = 0)
# Close the progress when this reactive exits (even if there's an error)
on.exit(progress$close())
# Create a closure to update progress.
updateProgress <- function(value = NULL, detail = NULL) {
if (is.null(value)) {
value <- progress$getValue()
value <- value + (progress$getMax() - value) / 5
}
progress$set(value = value, detail = detail)
}
tmpfile <- image_read("gif50.gif") %>%
# image_resize("90%") %>%
image_animate(fps=4) %>%
image_write(tempfile(fileext='gif'), format = 'gif')
list(src = tmpfile, contentType = "image/gif")
})
output$downloadGif100 <- downloadHandler(
filename = "gif100.gif",
content = function(file){
image_write(im = image_read("gif100.gif"), path = file)
}
)
output$downloadGif50 <- downloadHandler(
filename = "gif50.gif",
content = function(file){
image_write(im = image_read("gif50.gif"), path = file)
}
)
})
shinyApp(
ui = ui,
server = server
)
server <- function(input, output) ({
options(shiny.usecairo=T)
output$MapTitle <- renderText(paste0("Map of Electricity Access in ",input$inputyear))
output$YearMap <- renderLeaflet({
# Get input year
h <- input$inputyear
# Get mapping data
countries <- YearMapDataFxn(h)
countries <- countries[!countries$ADMIN == "Antarctica",]
# Define color palette
pal <- colorNumeric(c("darkseagreen3","deepskyblue4"), domain = countries$Access)
labels <- sprintf(
"<strong>%s</strong><br/>%g &#37;</sup>",
countries$ADMIN, countries$Access
) %>% lapply(htmltools::HTML)
leaflet(countries) %>%
# options = leafletOptions(minZoom = 0, maxZoom = 3) %>%
# addTiles() %>%
addPolygons(
options = leafletOptions(minZoom = 0, maxZoom = 3),
fillColor = ~pal(Access),
weight = 0.3,
opacity = 1,
color = "black",
dashArray = "",
fillOpacity = 1,
highlight = highlightOptions(
weight = 1,
color = "white",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))  %>%
addLegend(
pal = pal,
values = ~Access,
opacity = 1,
title = NULL,
labFormat = labelFormat(suffix = "%"),
position = "bottomright"
)
})
output$CountryMapTitle <- renderText({
h <- input$inputyear_c
c <- input$inputcountry
r <- input$inputregion
if(input$inputcountry == "USA - Continental"){
c="Continental USA"
}
if(input$inputcountry == "USA - Hawaii"){
c="Hawaii"
}
if(input$inputcountry == "USA - Alaska"){
c="Alaska"
}
if(r == "National"){r <- ""}
paste0("Electricity Access in ",r," ",c," in ",h)
})
output$CountryMap <- renderPlot({
# Get input year and country
h <- input$inputyear_c
c <- input$inputcountry
r <- input$inputregion
if(c == ''){
ggplot()
}
else{
# Get mapping data
if(c %in% c("USA - Hawaii","USA - Alaska","USA - Continental")){
c="USA"
}
map2 <- CountryMapDataFxn(c,h)
map <- map2[,1:6]
if(input$inputcountry == "USA - Continental"){
map <- map[!(map$subregion %in% c("Hawaii","Alaska")),]
c="Continental USA"
}
if(input$inputcountry == "USA - Hawaii"){
map <- map[map$subregion == "Hawaii",]
c="Hawaii"
}
if(input$inputcountry == "USA - Alaska"){
map <- map[map$subregion == "Alaska",]
c="Alaska"
}
# Plot
# Ammend for countries that do not have data
test <- map2[names(map2) == r]
if(dim(data.frame(test))[1]==0){
map <- worldmap[worldmap$region==c,]
gg = ggplot() +
ggtitle(
paste0(
"Data is unavailable for \n",
as.character(c)
)
) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region),
fill = "gray"
) +
theme(
plot.title = element_text(hjust = 0.5, size = 30),
plot.background = element_rect(fill = "transparent")
# panel.background = element_rect(fill = "black")
)
}else if(T %in% is.na(test)){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", c)) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region),
fill = "gray"
) +
coord_equal()
theme(
plot.title = element_text(hjust = 0.5, size = 30),
plot.background = element_rect(fill = "transparent")
# panel.background = element_rect(fill = "black")
)
}else{
map$access <- max(map2[names(map2) == r])
names(map)[ncol(map)] <- "access"
gg = ggplot() +
ggtitle(paste0(max(map$access),"%")) +
theme(
plot.title = element_text(hjust = 0.5, size = 30),
plot.background = element_rect(fill = "transparent")
# panel.background = element_rect(fill = "black")
) +
geom_map(
data=map,
map=map,
aes(
x=long,
y=lat,
map_id=region,
fill=access
)
) +
scale_fill_gradient(
low = "orange",
high = "blue",
guide = "colourbar",
limits=c(0,100)
) +
coord_equal()
}
gg
}
}, bg="transparent")
output$gif100 <- renderImage({
# Create a Progress object
progress <- shiny::Progress$new(style = "old")
progress$set(message = "Computing data", value = 0)
# Close the progress when this reactive exits (even if there's an error)
on.exit(progress$close())
# Create a closure to update progress.
updateProgress <- function(value = NULL, detail = NULL) {
if (is.null(value)) {
value <- progress$getValue()
value <- value + (progress$getMax() - value) / 5
}
progress$set(value = value, detail = detail)
}
tmpfile <- image_read("gif100.gif") %>%
# image_resize("90%") %>%
image_animate(fps=4) %>%
image_write(tempfile(fileext='gif'), format = 'gif')
list(src = tmpfile, contentType = "image/gif")
})
output$gif50 <- renderImage({
# Create a Progress object
progress <- shiny::Progress$new(style = "old")
progress$set(message = "Computing data", value = 0)
# Close the progress when this reactive exits (even if there's an error)
on.exit(progress$close())
# Create a closure to update progress.
updateProgress <- function(value = NULL, detail = NULL) {
if (is.null(value)) {
value <- progress$getValue()
value <- value + (progress$getMax() - value) / 5
}
progress$set(value = value, detail = detail)
}
tmpfile <- image_read("gif50.gif") %>%
# image_resize("90%") %>%
image_animate(fps=4) %>%
image_write(tempfile(fileext='gif'), format = 'gif')
list(src = tmpfile, contentType = "image/gif")
})
output$downloadGif100 <- downloadHandler(
filename = "gif100.gif",
content = function(file){
image_write(im = image_read("gif100.gif"), path = file)
}
)
output$downloadGif50 <- downloadHandler(
filename = "gif50.gif",
content = function(file){
image_write(im = image_read("gif50.gif"), path = file)
}
)
})
shinyApp(
ui = ui,
server = server
)
