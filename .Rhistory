library(Cairo)
library(Cairo)
install.packages('cairo')
install.packages('Cairo')
library(Cairo)
setwd("~/GoogleDrive/1UT/1_Research/1_Energy Access/Shiny App/Access_App")
shiny::runApp()
runApp()
install.packages(googleVis)
install.packages('googleVis')
library(googleVis)
runApp()
wdi_leaflet(indicator = "SP.RUR.TOTL.ZS", indicator_alias = "Percent rural", colors = "OrRd")
source('~/GoogleDrive/1UT/1_Research/1_Energy Access/Shiny App/Access_App/wdi_leaflet.R')
wdi_leaflet(indicator = "SP.RUR.TOTL.ZS", indicator_alias = "Percent rural", colors = "OrRd")
# Load necessary packages
library(shiny)
library(shinydashboard)
library(ggplot2)
library(maps)
library(ggmap)
library(magick)
library(markdown)
library(leaflet)
library(geojson)
library(geojsonio)
library(rgdal)
library(dplyr)
library(Cairo)
library(dashboardthemes)
# library(c( shiny,shinydashboard,ggplot2,maps,ggmap,magick,markdown,leaflet,geojson,geojsonio,rgdal,dplyr,Cairo,dashboardthemes ))
# Load access data
access_data <- read.csv('access_data.csv', header=TRUE, stringsAsFactors = F, na.strings="NA")
# Load map data and remove Antarctica
countries <- readOGR("countries.geojson")
countries <- countries[!countries$ADMIN == "Antarctica",]
# Load world map and fix virgin islands labels
worldmap <- map_data(map="world")
worldmap$region[worldmap$region == 'Virgin Islands'][1:23] <- "British Virgin Islands"
worldmap$region[worldmap$region == 'Virgin Islands'] <- "United States Virgin Islands"
# Get list of countries
countrylist <- cbind.data.frame(worldmap$region,worldmap$subregion,stringsAsFactors = F)
names(countrylist) <- c("region","subregion")
countrylist$region[countrylist$subregion == 'Hawaii'] <- "USA - Hawaii"
countrylist$region[countrylist$subregion == 'Alaska'] <- "USA - Alaska"
countrylist$region[countrylist$region == 'USA'] <- "USA - Continental"
countrylist <- data.frame(unique(countrylist$region))
countrylist <- data.frame(countrylist[order(countrylist$unique.countrylist.region.),])
names(countrylist) <- "Country/Region"
# Define data processing function with year, h, as input
YearMapDataFxn = function(h,MaxPerc=100){
# Get access data for year h
access_df <- access_data[access_data$Year == as.numeric(h),]
access_df <- cbind.data.frame(access_df$country, as.numeric(access_df$Nat.Elec.Rate), stringsAsFactors=FALSE)
names(access_df) <- c("Country","Access")
# Replace electrification rates over given percentage with NA
access_df$Access[access_df$Access > MaxPerc] <- NA
# Merge with map data
countries@data <- left_join(countries@data, access_df, by = c('ADMIN' = 'Country'))
return(countries)
}
# Define data processing function with year, h, as input
CountryMapDataFxn = function(c,h){
# Get access data for year h, country c
access_df <- access_data[access_data$country == c,]
access_df <- access_df[access_df$Year == h,]
# Merge access data with worldmap by country
countrymap <- worldmap[worldmap$region == c,]
df <- merge(countrymap, access_df, by.x = "region", by.y = "country")
df2 <- df[order(df$Year),]
names(df2)[8:10] <- c("National","Rural","Urban")
return(df2)
}
h = 1990
c = 'Algeria'
r = 'Rural'
countries <- YearMapDataFxn(h)
countries <- countries[!countries$ADMIN == "Antarctica",]
pal <- colorNumeric(c("darkseagreen3","deepskyblue4"), domain = countries$Access)
labels <- sprintf(
"<strong>%s</strong><br/>%g &#37;</sup>",
countries$ADMIN, countries$Access
) %>% lapply(htmltools::HTML)
leaflet(countries) %>%
# options = leafletOptions(minZoom = 0, maxZoom = 3) %>%
# addTiles() %>%
addPolygons(
options = leafletOptions(minZoom = 0, maxZoom = 3),
fillColor = ~pal(Access),
weight = 0.3,
opacity = 1,
color = "black",
dashArray = "",
fillOpacity = 1,
highlight = highlightOptions(
weight = 1,
color = "white",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))  %>%
addLegend(
pal = pal,
values = ~Access,
opacity = 1,
title = NULL,
labFormat = labelFormat(suffix = "%"),
position = "bottomright"
)
leaflet(countries) %>%
# options = leafletOptions(minZoom = 0, maxZoom = 3) %>%
# addTiles() %>%
addPolygons(
options = leafletOptions(minZoom = 0, maxZoom = 3),
fillColor = ~pal(Access),
weight = 0.3,
opacity = 1,
color = "black",
dashArray = "",
fillOpacity = 1,
highlight = highlightOptions(
weight = 1,
color = "white",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))  %>%
addLegend(
pal = pal,
values = ~Access,
opacity = 1,
title = NULL,
labFormat = labelFormat(suffix = "%"),
position = "bottomright"
)
start <- Sys.time()
leaflet(countries) %>%
# options = leafletOptions(minZoom = 0, maxZoom = 3) %>%
# addTiles() %>%
addPolygons(
options = leafletOptions(minZoom = 0, maxZoom = 3),
fillColor = ~pal(Access),
weight = 0.3,
opacity = 1,
color = "black",
dashArray = "",
fillOpacity = 1,
highlight = highlightOptions(
weight = 1,
color = "white",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))  %>%
addLegend(
pal = pal,
values = ~Access,
opacity = 1,
title = NULL,
labFormat = labelFormat(suffix = "%"),
position = "bottomright"
)
end <- Sys.time()
start
end
runApp()
start <- Sys.time()
leaflet(countries) %>%
# options = leafletOptions(minZoom = 0, maxZoom = 3) %>%
addTiles() %>%
addPolygons(
options = leafletOptions(minZoom = 0, maxZoom = 3),
fillColor = ~pal(Access),
weight = 0.3,
opacity = 1,
color = "black",
dashArray = "",
fillOpacity = 1,
highlight = highlightOptions(
weight = 1,
color = "white",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))  %>%
addLegend(
pal = pal,
values = ~Access,
opacity = 1,
title = NULL,
labFormat = labelFormat(suffix = "%"),
position = "bottomright"
)
end <- Sys.time()
start
end
h = 1991
start
start <- Sys.time()
leaflet(countries) %>%
# options = leafletOptions(minZoom = 0, maxZoom = 3) %>%
addTiles() %>%
addPolygons(
options = leafletOptions(minZoom = 0, maxZoom = 3),
fillColor = ~pal(Access),
weight = 0.3,
opacity = 1,
color = "black",
dashArray = "",
fillOpacity = 1,
highlight = highlightOptions(
weight = 1,
color = "white",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))  %>%
addLegend(
pal = pal,
values = ~Access,
opacity = 1,
title = NULL,
labFormat = labelFormat(suffix = "%"),
position = "bottomright"
)
end <- Sys.time()
start
end
runApp()
runApp()
runApp()
runApp()
h
countries <- YearMapDataFxn(h)
countries <- countries[!countries$ADMIN == "Antarctica",]
pal <- colorNumeric(c("darkseagreen3","deepskyblue4"), domain = countries$Access)
labels <- sprintf(
"<strong>%s</strong><br/>%g &#37;</sup>",
countries$ADMIN, countries$Access
) %>% lapply(htmltools::HTML)
h=2014
countries <- YearMapDataFxn(h)
countries <- countries[!countries$ADMIN == "Antarctica",]
pal <- colorNumeric(c("darkseagreen3","deepskyblue4"), domain = countries$Access)
labels <- sprintf(
"<strong>%s</strong><br/>%g &#37;</sup>",
countries$ADMIN, countries$Access
) %>% lapply(htmltools::HTML)
leaflet(countries) %>%
# options = leafletOptions(minZoom = 0, maxZoom = 3) %>%
# addTiles() %>%
addPolygons(
# options = leafletOptions(minZoom = 0, maxZoom = 3),
fillColor = ~pal(Access),
weight = 0.3,
opacity = 1,
color = "black",
dashArray = "",
fillOpacity = 1,
highlight = highlightOptions(
weight = 1,
color = "white",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))  %>%
addLegend(
pal = pal,
values = ~Access,
opacity = 1,
title = NULL,
labFormat = labelFormat(suffix = "%"),
position = "bottomright"
)
h
access_df <- access_data[access_data$Year == as.numeric(h),]
access_df <- cbind.data.frame(access_df$country, as.numeric(access_df$Nat.Elec.Rate), stringsAsFactors=FALSE)
names(access_df) <- c("Country","Access")
access_df$Access[access_df$Access > MaxPerc] <- NA
MaxPerc=100
access_df$Access[access_df$Access > MaxPerc] <- NA
countries@data <- left_join(countries@data, access_df, by = c('ADMIN' = 'Country'))
access_df <- access_data[access_data$Year == as.numeric(h),]
access_df <- cbind.data.frame(access_df$country, as.numeric(access_df$Nat.Elec.Rate), stringsAsFactors=FALSE)
names(access_df) <- c("Country","Access")
# Replace electrification rates over given percentage with NA
access_df$Access[access_df$Access > MaxPerc] <- NA
# Merge with map data
countries@data <- left_join(countries@data, access_df, by = c('ADMIN' = 'Country'))
h
- Sys.time()
countries <- YearMapDataFxn(h)
end <- Sys.time()
start <- Sys.time()
countries <- YearMapDataFxn(h)
end <- Sys.time()
print(end-start)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
# Load necessary packages
library(shiny)
library(shinydashboard)
library(ggplot2)
library(maps)
library(ggmap)
library(magick)
library(markdown)
library(leaflet)
library(geojson)
library(geojsonio)
library(rgdal)
library(dplyr)
library(Cairo)
library(dashboardthemes)
# library(c( shiny,shinydashboard,ggplot2,maps,ggmap,magick,markdown,leaflet,geojson,geojsonio,rgdal,dplyr,Cairo,dashboardthemes ))
######## try using data table instead of data frame
# Load access data
access_data <- read.csv('access_data.csv', header=TRUE, stringsAsFactors = F, na.strings="NA")
# Load map data and remove Antarctica
countries <- readOGR("countries.geojson")
countries <- countries[!countries$ADMIN == "Antarctica",]
# Load world map and fix virgin islands labels
worldmap <- map_data(map="world")
worldmap$region[worldmap$region == 'Virgin Islands'][1:23] <- "British Virgin Islands"
worldmap$region[worldmap$region == 'Virgin Islands'] <- "United States Virgin Islands"
# Get list of countries
countrylist <- cbind.data.frame(worldmap$region,worldmap$subregion,stringsAsFactors = F)
names(countrylist) <- c("region","subregion")
countrylist$region[countrylist$subregion == 'Hawaii'] <- "USA - Hawaii"
countrylist$region[countrylist$subregion == 'Alaska'] <- "USA - Alaska"
countrylist$region[countrylist$region == 'USA'] <- "USA - Continental"
countrylist <- data.frame(unique(countrylist$region))
countrylist <- data.frame(countrylist[order(countrylist$unique.countrylist.region.),])
names(countrylist) <- "Country/Region"
# Define data processing function with year, h, as input
YearMapDataFxn = function(h,MaxPerc=100){
# Get access data for year h
access_df <- access_data[access_data$Year == as.numeric(h),]
access_df <- cbind.data.frame(access_df$country, as.numeric(access_df$Nat.Elec.Rate), stringsAsFactors=FALSE)
names(access_df) <- c("Country","Access")
# Replace electrification rates over given percentage with NA
access_df$Access[access_df$Access > MaxPerc] <- NA
# Merge with map data
countries@data <- left_join(countries@data, access_df, by = c('ADMIN' = 'Country'))
return(countries)
}
# Define data processing function with year, h, as input
CountryMapDataFxn = function(c,h){
# Get access data for year h, country c
access_df <- access_data[access_data$country == c,]
access_df <- access_df[access_df$Year == h,]
# Merge access data with worldmap by country
countrymap <- worldmap[worldmap$region == c,]
df <- merge(countrymap, access_df, by.x = "region", by.y = "country")
df2 <- df[order(df$Year),]
names(df2)[8:10] <- c("National","Rural","Urban")
return(df2)
}
save.image("~/GoogleDrive/1UT/3_Research/1_Energy Access/Shiny App/Access_App/Lines1-70.Rdata")
load("~/GoogleDrive/1UT/3_Research/1_Energy Access/Shiny App/Access_App/Lines1-70.Rdata")
load("./Lines1-70.Rdata")
runApp()
load("~/GoogleDrive/1UT/3_Research/1_Energy Access/Shiny App/Access_App/Lines1-70.Rdata")
getwd
getwd()
ls
list()
list.files()
load("Lines1-70.Rdata")
runApp()
runApp()
load("Lines1-70.Rdata")
load('Lines1-70.Rdata')
runApp()
runApp()
runApp()
load("~/GoogleDrive/1UT/3_Research/1_Energy Access/Shiny App/Access_App/Lines1-70.Rdata")
CountryMapDataFxn('Albania',1990)
map2 <- CountryMapDataFxn('Albania',1990)
map <- map2[,1:6]
test <- YearMapDataFxn(1990)
h=1990
access_df <- access_data[access_data$Year == as.numeric(h),]
access_df <- cbind.data.frame(access_df$country, as.numeric(access_df$Nat.Elec.Rate), stringsAsFactors=FALSE)
names(access_df) <- c("Country","Access")
MaxPerc=100
access_df$Access[access_df$Access > MaxPerc] <- NA
test<-left_join(countries@data, access_df, by = c('ADMIN' = 'Country'))
head(countries@data)
class(countries@data)
class(countries@data$ADMIN)
class(access_df$Country)
head(access_df)
test <- <- left_join(countries@data, as.factor(access_df), by = c('ADMIN' = 'Country'))
test <- left_join(countries@data, as.factor(access_df), by = c('ADMIN' = 'Country'))
test <- left_join(countries@data, as.data.frame.factor(access_df), by = c('ADMIN' = 'Country'))
head(as.data.frame.factor(access_df))
test_df <- as.data.frame.factor(access_df)
names(test_df) <- c("Country","Access")
head(test_df)
head(access_df)
View(test_df)
test_df <- as.factor(access_df)
head(test_df)
names(test_df)
<- left_join(countries@data, test_df, by = c('ADMIN' = 'Country'))
test <- left_join(countries@data, test_df, by = c('ADMIN' = 'Country'))
class(test_df)
test_df <-data.frame()
test_df$Country <- as.factor(access_df$Country)
test_df <-data.frame(233,2)
test_df$Country <- as.factor(access_df$Country)
test_df
test_df <- access_df
test_df$Country <- as.factor(access_df$Country)
head(test_df)
test_df$Access <- as.factor(access_df$Access)
head(test_df)
test <- left_join(countries@data, test_df, by = c('ADMIN' = 'Country'))
test_df
levels(test_df$Country)
levels(countries@data$ADMIN)
combined <- sort(union(levels(test_df$Country), levels(countries@data$ADMIN)))
test <- left_join(mutate(countries@data, a=factor(ADMIN, levels=combined)), mutate(test_df, a=factor(Country, levels=combined)))
head
head(test)
test2 <- left_join(countries@data, access_df, by = c('ADMIN' = 'Country'))
head(test2)
test <- left_join(mutate(countries@data, ADMIN=factor(ADMIN, levels=combined)), mutate(test_df, Country=factor(Country, levels=combined)))
test <- left_join(mutate(countries@data, by=factor(ADMIN, levels=combined)), mutate(test_df, by=factor(Country, levels=combined)))
head(test)
test <- left_join(mutate(countries@data, ADMIN=factor(ADMIN, levels=combined)), mutate(test_df, Country=factor(Country, levels=combined)),by=c('ADMIN' = 'Country'))
head(test)
head(test2)
access_df$Country <- as.factor(access_df$Country)
head(access_df)
access_df$Access <- as.factor(access_df$Access)
head(access_df)
combined <- sort(union(levels(access_df$Country), levels(countries@data$ADMIN)))
countries@data <- left_join(mutate(countries@data, ADMIN=factor(ADMIN, levels=combined)), mutate(test_df, Country=factor(Country, levels=combined)),by=c('ADMIN' = 'Country'))
load('Lines1-70.Rdata')
access_df <- access_data[access_data$Year == as.numeric(h),]
access_df <- cbind.data.frame(access_df$country, as.numeric(access_df$Nat.Elec.Rate), stringsAsFactors=FALSE)
names(access_df) <- c("Country","Access")
# Replace electrification rates over given percentage with NA
access_df$Access[access_df$Access > MaxPerc] <- NA
access_df$Country <- as.factor(access_df$Country)
access_df$Access <- as.factor(access_df$Access)
combined <- sort(union(levels(access_df$Country), levels(countries@data$ADMIN)))
countries@data <- left_join(mutate(countries@data, ADMIN=factor(ADMIN, levels=combined)), mutate(test_df, Country=factor(Country, levels=combined)),by=c('ADMIN' = 'Country'))
countries@data <- left_join(mutate(countries@data, ADMIN=factor(ADMIN, levels=combined)), mutate(access_df, Country=factor(Country, levels=combined)),by=c('ADMIN' = 'Country'))
runApp()
access_df <- access_data[access_data$Year == as.numeric(h),]
access_df <- cbind.data.frame(access_df$country, as.numeric(access_df$Nat.Elec.Rate), stringsAsFactors=FALSE)
names(access_df) <- c("Country","Access")
# Replace electrification rates over given percentage with NA
access_df$Access[access_df$Access > MaxPerc] <- NA
access_df$Country <- as.factor(access_df$Country)
combined <- sort(union(levels(access_df$Country), levels(countries@data$ADMIN)))
countries@data <- left_join(mutate(countries@data, ADMIN=factor(ADMIN, levels=combined)), mutate(access_df, Country=factor(Country, levels=combined)),by=c('ADMIN' = 'Country'))
runApp()
