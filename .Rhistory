}
# Plot
# Ammend for countries that do not have data
test <- map2[names(map2) == r]
if(dim(data.frame(test))[1]==0){
map <- worldmap[worldmap$region==c,]
gg = ggplot() +
ggtitle(
paste0(
"Data is unavailable for \n",
as.character(c)
)
) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region),
fill = "gray"
) +
theme(
plot.title = element_text(hjust = 0.5, size = 30),
plot.background = element_rect(fill = "transparent")
# panel.background = element_rect(fill = "black")
)
}else if(T %in% is.na(test)){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", c)) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region),
fill = "gray"
) +
coord_equal()
theme(
plot.title = element_text(hjust = 0.5, size = 30),
plot.background = element_rect(fill = "transparent")
# panel.background = element_rect(fill = "black")
)
}else{
map$access <- max(map2[names(map2) == r])
names(map)[ncol(map)] <- "access"
gg = ggplot() +
ggtitle(paste0(max(map$access),"%")) +
theme(
plot.title = element_text(hjust = 0.5, size = 30),
plot.background = element_rect(fill = "transparent")
# panel.background = element_rect(fill = "black")
) +
geom_map(
data=map,
map=map,
aes(
x=long,
y=lat,
map_id=region,
fill=access
)
) +
scale_fill_gradient(
low = "orange",
high = "blue",
guide = "colourbar",
limits=c(0,100)
) +
coord_equal()
}
gg
}
}, bg="transparent")
output$gif100 <- renderImage({
# Create a Progress object
progress <- shiny::Progress$new(style = "old")
progress$set(message = "Computing data", value = 0)
# Close the progress when this reactive exits (even if there's an error)
on.exit(progress$close())
# Create a closure to update progress.
updateProgress <- function(value = NULL, detail = NULL) {
if (is.null(value)) {
value <- progress$getValue()
value <- value + (progress$getMax() - value) / 5
}
progress$set(value = value, detail = detail)
}
tmpfile <- image_read("gif100.gif") %>%
# image_resize("90%") %>%
image_animate(fps=4) %>%
image_write(tempfile(fileext='gif'), format = 'gif')
list(src = tmpfile, contentType = "image/gif")
})
output$gif50 <- renderImage({
# Create a Progress object
progress <- shiny::Progress$new(style = "old")
progress$set(message = "Computing data", value = 0)
# Close the progress when this reactive exits (even if there's an error)
on.exit(progress$close())
# Create a closure to update progress.
updateProgress <- function(value = NULL, detail = NULL) {
if (is.null(value)) {
value <- progress$getValue()
value <- value + (progress$getMax() - value) / 5
}
progress$set(value = value, detail = detail)
}
tmpfile <- image_read("gif50.gif") %>%
# image_resize("90%") %>%
image_animate(fps=4) %>%
image_write(tempfile(fileext='gif'), format = 'gif')
list(src = tmpfile, contentType = "image/gif")
})
output$downloadGif100 <- downloadHandler(
filename = "gif100.gif",
content = function(file){
image_write(im = image_read("gif100.gif"), path = file)
}
)
output$downloadGif50 <- downloadHandler(
filename = "gif50.gif",
content = function(file){
image_write(im = image_read("gif50.gif"), path = file)
}
)
})
shinyApp(
ui = ui,
server = server
)
server <- function(input, output) ({
# Get mapping data
countries2 <- reactive({
YearMapDataFxn(input$inputyear)
})
# Define color palette
pal <- reactive({
colorNumeric(
c("darkseagreen3","deepskyblue4"),
domain = countries2$Access
)
})
# Define interactive country labels
labels <- reactive({ sprintf("<strong>%s</strong><br/>%g &#37;</sup>", countries2()$ADMIN,countries2()$Access) %>%
lapply(htmltools::HTML) })
output$YearMap <- renderLeaflet({
leaflet(countries) %>%
addTiles() %>%
tileOptions(minZoom = 1, maxZoom = 2)
# addPolygons(
#     options = leafletOptions(minZoom = 0, maxZoom = 3),
#     fillColor = "gray",
#     weight = 0.3,
#     opacity = 1,
#     color = "black",
#     dashArray = "",
#     fillOpacity = 1,
#     highlight = highlightOptions(
#         weight = 1,
#         color = "white",
#         dashArray = "",
#         fillOpacity = 0.7,
#         bringToFront = TRUE
#     )
# )
})
observe({
leafletProxy("YearMap",data = countries2()) %>%
clearShapes() %>%
clearControls() %>%
addPolygons(
options = leafletOptions(minZoom = 1, maxZoom = 3),
fillColor = colorNumeric(
c("darkseagreen3","deepskyblue4"),
domain = c(0,100)
),
weight = 0.3,
opacity = 1,
color = "black",
dashArray = "",
fillOpacity = 1,
highlight = highlightOptions(
weight = 1,
color = "white",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE
)#,
# label = labels(),
# labelOptions = labelOptions(
#     style = list("font-weight" = "normal", padding = "3px 8px"),
#     textsize = "15px",
#     direction = "auto"
# )
) %>%
addLegend(
pal = colorNumeric(
c("darkseagreen3","deepskyblue4"),
domain = c(0,100)
),
values = ~Access,
opacity = 1,
title = NULL,
labFormat = labelFormat(suffix = "%"),
position = "bottomright"
)
})
# output$YearMap <- renderLeaflet({
#
#     # Get input year
#     h <- input$inputyear
#
#     # Get mapping data
#     countries <- YearMapDataFxn(h)
#
#     # Remove Antarctica
#     countries <- countries[!countries$ADMIN == "Antarctica",]
#
#     # Define color palette
#     pal <- colorNumeric(c("darkseagreen3","deepskyblue4"), domain = countries$Access)
#     labels <- sprintf(
#       "<strong>%s</strong><br/>%g &#37;</sup>",
#       countries$ADMIN, countries$Access
#     ) %>% lapply(htmltools::HTML)
#
#     leaflet(countries) %>%
#         # options = leafletOptions(minZoom = 0, maxZoom = 3) %>%
#         # addTiles() %>%
#         addPolygons(
#             options = leafletOptions(minZoom = 0, maxZoom = 3),
#             fillColor = ~pal(Access),
#             weight = 0.3,
#             opacity = 1,
#             color = "black",
#             dashArray = "",
#             fillOpacity = 1,
#             highlight = highlightOptions(
#                 weight = 1,
#                 color = "white",
#                 dashArray = "",
#                 fillOpacity = 0.7,
#                 bringToFront = TRUE),
#             label = labels,
#             labelOptions = labelOptions(
#                 style = list("font-weight" = "normal", padding = "3px 8px"),
#                 textsize = "15px",
#                 direction = "auto"))  %>%
#         addLegend(
#             pal = pal,
#             values = ~Access,
#             opacity = 1,
#             title = NULL,
#             labFormat = labelFormat(suffix = "%"),
#             position = "bottomright"
#         )
# })
output$MapTitle <- renderText(  paste0("Map of Electricity Access in ",input$inputyear)  )
output$CountryMapTitle <- renderText({
h <- input$inputyear_c
c <- input$inputcountry
r <- input$inputregion
if(input$inputcountry == "USA - Continental"){
c="Continental USA"
}
if(input$inputcountry == "USA - Hawaii"){
c="Hawaii"
}
if(input$inputcountry == "USA - Alaska"){
c="Alaska"
}
if(r == "National"){r <- ""}
paste0("Electricity Access in ",r," ",c," in ",h)
})
output$CountryMap <- renderPlot({
# Get input year and country
h <- input$inputyear_c
c <- input$inputcountry
r <- input$inputregion
if(c == ''){
ggplot()
}
else{
# Get mapping data
if(c %in% c("USA - Hawaii","USA - Alaska","USA - Continental")){
c="USA"
}
map2 <- CountryMapDataFxn(c,h)
map <- map2[,1:6]
if(input$inputcountry == "USA - Continental"){
map <- map[!(map$subregion %in% c("Hawaii","Alaska")),]
c="Continental USA"
}
if(input$inputcountry == "USA - Hawaii"){
map <- map[map$subregion == "Hawaii",]
c="Hawaii"
}
if(input$inputcountry == "USA - Alaska"){
map <- map[map$subregion == "Alaska",]
c="Alaska"
}
# Plot
# Ammend for countries that do not have data
test <- map2[names(map2) == r]
if(dim(data.frame(test))[1]==0){
map <- worldmap[worldmap$region==c,]
gg = ggplot() +
ggtitle(
paste0(
"Data is unavailable for \n",
as.character(c)
)
) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region),
fill = "gray"
) +
theme(
plot.title = element_text(hjust = 0.5, size = 30),
plot.background = element_rect(fill = "transparent")
# panel.background = element_rect(fill = "black")
)
}else if(T %in% is.na(test)){
gg = ggplot() +
ggtitle(paste0("Data is unavailable for \n", c)) +
geom_map(
data=map,
map=map,
aes(x=long, y=lat, map_id=region),
fill = "gray"
) +
coord_equal()
theme(
plot.title = element_text(hjust = 0.5, size = 30),
plot.background = element_rect(fill = "transparent")
# panel.background = element_rect(fill = "black")
)
}else{
map$access <- max(map2[names(map2) == r])
names(map)[ncol(map)] <- "access"
gg = ggplot() +
ggtitle(paste0(max(map$access),"%")) +
theme(
plot.title = element_text(hjust = 0.5, size = 30),
plot.background = element_rect(fill = "transparent")
# panel.background = element_rect(fill = "black")
) +
geom_map(
data=map,
map=map,
aes(
x=long,
y=lat,
map_id=region,
fill=access
)
) +
scale_fill_gradient(
low = "orange",
high = "blue",
guide = "colourbar",
limits=c(0,100)
) +
coord_equal()
}
gg
}
}, bg="transparent")
output$gif100 <- renderImage({
# Create a Progress object
progress <- shiny::Progress$new(style = "old")
progress$set(message = "Computing data", value = 0)
# Close the progress when this reactive exits (even if there's an error)
on.exit(progress$close())
# Create a closure to update progress.
updateProgress <- function(value = NULL, detail = NULL) {
if (is.null(value)) {
value <- progress$getValue()
value <- value + (progress$getMax() - value) / 5
}
progress$set(value = value, detail = detail)
}
tmpfile <- image_read("gif100.gif") %>%
# image_resize("90%") %>%
image_animate(fps=4) %>%
image_write(tempfile(fileext='gif'), format = 'gif')
list(src = tmpfile, contentType = "image/gif")
})
output$gif50 <- renderImage({
# Create a Progress object
progress <- shiny::Progress$new(style = "old")
progress$set(message = "Computing data", value = 0)
# Close the progress when this reactive exits (even if there's an error)
on.exit(progress$close())
# Create a closure to update progress.
updateProgress <- function(value = NULL, detail = NULL) {
if (is.null(value)) {
value <- progress$getValue()
value <- value + (progress$getMax() - value) / 5
}
progress$set(value = value, detail = detail)
}
tmpfile <- image_read("gif50.gif") %>%
# image_resize("90%") %>%
image_animate(fps=4) %>%
image_write(tempfile(fileext='gif'), format = 'gif')
list(src = tmpfile, contentType = "image/gif")
})
output$downloadGif100 <- downloadHandler(
filename = "gif100.gif",
content = function(file){
image_write(im = image_read("gif100.gif"), path = file)
}
)
output$downloadGif50 <- downloadHandler(
filename = "gif50.gif",
content = function(file){
image_write(im = image_read("gif50.gif"), path = file)
}
)
})
shinyApp(
ui = ui,
server = server
)
test <- leaflet(countries)
test <- test %>% addTiles()
test
leaflet() %>% addTiles()
test <- test %>% tileOptions(minZoom = 1, maxZoom = 2)
test
test <- test %>% leafletOptions(minZoom = 0, maxZoom = 3)
test
test <- test %>% setView(lng = -10,lat = -10, zoom = 0)
test <- test %>% setView(lng = 10,lat = 10, zoom = 0)
?setView
test <- test %>% setView(lng = 10,lat = 10, zoom = 3)
test <- leaflet() %>% addTiles() %>% setView(-71.0382679, 42.3489054, zoom = 18)
m  # the RStudio 'headquarter'
test <- leaflet() %>% addTiles() %>% setView(-71.0382679, 42.3489054, zoom = 18)
test
test <- leaflet() %>% addTiles() %>% setView(-71.0382679, 42.3489054, zoom = 18) %>% leafletOptions(maxZoom = 3)
test
test <- leaflet() %>% addTiles() %>% setView(-71.0382679, 42.3489054, zoom = 18)
test
test <- leaflet() %>% addTiles() %>% setView(-71.0382679, 42.3489054, zoom = 10)
test
test <- leaflet() %>% addTiles() %>% setView(-71.0382679, 42.3489054, zoom = 10) %>% leafletOptions(minZoom =5,maxZoom = 10)
test
test <- leaflet() %>% addTiles() %>% setView(-71.0382679, 42.3489054, zoom = 10) %>% fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
test <- leaflet() %>% addTiles() %>% setView(-71.0382679, 42.3489054, zoom = 10) %>% fitBounds(lng1 = 40,lng2 = 70,lat1 = -70,lat2 = -40)
test
test <- leaflet() %>% addTiles() %>% fitBounds(lng1 = 40,lng2 = 70,lat1 = -70,lat2 = -40)
test
test <- leaflet() %>% addTiles() %>% setView(-71.0382679, 42.3489054, zoom = 10)
test
?setView
?noWrap
test <- leaflet() %>% addTiles(options=providerTileOptions(noWrap = TRUE)) %>% setView(-71.0382679, 42.3489054, zoom = 10)
test
source("https://raw.githubusercontent.com/walkerke/teaching-with-datavis/master/wdi-leaflet/wdi_leaflet.R")
source("https://github.com/walkerke/teaching-with-datavis/blob/master/wdi-leaflet/wdi_leaflet.R")
library(rgdal)
library(WDI)
library(leaflet)
install.packages("WDI")
library(rgdal)
library(WDI)
library(leaflet)
wdi_leaflet <- function(indicator, indicator_alias = "Value", year = 2012, classes = 5, colors = "Blues") {
url <- "http://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/cultural/ne_50m_admin_0_countries.zip"
tmp <- tempdir()
file <- basename(url)
download.file(url, file)
unzip(file, exdir = tmp)
countries <- readOGR(dsn = tmp,
layer = "ne_50m_admin_0_countries",
encoding = "UTF-8",
verbose = FALSE)
dat <- WDI(country = "all",
indicator = indicator,
start = year,
end = year)
dat[[indicator]] <- round(dat[[indicator]], 1)
countries2 <- merge(countries,
dat,
by.x = "iso_a2",
by.y = "iso2c",
sort = FALSE)
pal <- colorQuantile(colors, NULL, n = classes)
country_popup <- paste0("<strong>Country: </strong>",
countries2$country,
"<br><strong>",
indicator_alias,
", ",
as.character(year),
": </strong>",
countries2[[indicator]])
stamen_tiles <- "http://{s}.tile.stamen.com/toner-lite/{z}/{x}/{y}.png"
stamen_attribution <- 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, under <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a>. Data by <a href="http://openstreetmap.org">OpenStreetMap</a>, under <a href="http://www.openstreetmap.org/copyright">ODbL</a>.'
leaflet(data = countries2) %>%
addTiles(urlTemplate = stamen_tiles,
attribution = stamen_attribution) %>%
setView(0, 0, zoom = 3) %>%
addPolygons(fillColor = ~pal(countries2[[indicator]]),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = country_popup)
}
## Example call
## wdi_leaflet(indicator = "SP.RUR.TOTL.ZS", indicator_alias = "Percent rural", colors = "OrRd")
wdi_leaflet(indicator = "SP.RUR.TOTL.ZS", indicator_alias = "Percent rural", colors = "OrRd")
wdi_leaflet(indicator = "SP.RUR.TOTL.ZS", indicator_alias = "Percent rural", colors = "OrRd")
